function sysCall_init()
    corout=coroutine.create(coroutineMain)
end

function sysCall_actuation()
    if coroutine.status(corout)~='dead' then
        local ok,errorMsg=coroutine.resume(corout)
        if errorMsg then
            error(debug.traceback(corout,errorMsg),2)
        end
    end
end

function coroutineMain()
    
    -- declare and initialize variables --
    
    -- < 20 cm wheel diameter -> 3.18 turns to make 2 m so turning 3 full turns in 1 second is less than 2 m/s
    maxWheelSpeed = 18.85/4 -- = 6 pi < 2 m/s so 6 pi / 4 is way less than 2 m/s
    slowWheelSpeed = maxWheelSpeed*0.1
    turnWheelSpeed = 0
    
    data = {}
    result={0,0,0}
    servoArr = {}
    motor_arr = {}
    sensor_arr = {}
    proxy_arr = {}
    orientation = 0
    res_L = 0
    res_R = 0
    res_M = 0
    sensorReading = {false,false,false}
    proxyDetect= false -- Proxy sensors see something
    lineDetect = false -- Vision sensors see something
    flagL=false -- trying to turn left
    flagR=false -- trying to turn right
    
    
    -- Get Plow motor handles --
    servoArr[1] = sim.getObjectHandle("rightBladeJoint")
    servoArr[2] = sim.getObjectHandle("leftBladeJoint")
    
    servoArr[3] = sim.getObjectHandle("rightBladeToArmJoint")
    servoArr[4] = sim.getObjectHandle("leftBladeToArmJoint")
    
    
    --open the plow blades
    
    sim.setJointMaxForce(servoArr[1], 15000)
    sim.setJointMaxForce(servoArr[2], 15000)
    
    sim.setJointTargetVelocity(servoArr[1], 1)
    
    sim.setJointTargetPosition(servoArr[1], 1.744)
    sim.setJointTargetPosition(servoArr[2], -1.744)
    
    sim.setJointTargetVelocity(servoArr[1], 3)
    sim.setJointTargetVelocity(servoArr[2], -1)
    
    sim.setJointTargetPosition(servoArr[3], 0)
    sim.setJointTargetPosition(servoArr[4], 0)
    
    -- Get model handle --

    model = sim.getObjectHandle("Pioneer_p3dx")

    -- Get motor handles --

    motor_arr[1] = sim.getObjectHandle("Pioneer_p3dx_leftMotor")
    motor_arr[2] = sim.getObjectHandle("Pioneer_p3dx_rightMotor")
    
    -- Get sensor handles --

    sensor_arr[1] = sim.getObjectHandle("Vision_sensorL") 
    sensor_arr[2] = sim.getObjectHandle("Vision_sensorM")
    sensor_arr[3] = sim.getObjectHandle("Vision_sensorR")
    
    -- Get proxi handles --

    proxy_arr[1] = sim.getObjectHandle("Proximity_Left") 
    proxy_arr[2] = sim.getObjectHandle("Proximity_Mid")
    proxy_arr[3] = sim.getObjectHandle("Proximity_Right")

    --wait for arms to get in position

    --leave the parking spot slowly
    sim.setJointTargetVelocity(motor_arr[1],slowWheelSpeed)--#)
    sim.setJointTargetVelocity(motor_arr[2],slowWheelSpeed)--#)

    
    --wait 5 seconds to finish initialization
    sim.wait(5,true)
    
    
    -- Main logic loop --
    while(true)do
    proxyDetect= false
    lineDetect = false
    flagL = false 
    flagR = false
        
	-- Every tick check the proximity sensors and print the values --

        res_L = sim.readProximitySensor(proxy_arr[1])
        res_M = sim.readProximitySensor(proxy_arr[2])
        res_R = sim.readProximitySensor(proxy_arr[3])
    
	print(res_L, res_M, res_R)  

	-- Depending on which sensors are triggered the robot will act accordingly--	      
    proxyDetect = (res_L > 0 or res_M > 0 or res_R > 0)
	if (res_L == 0 and res_M == 0 and res_R == 0) then
	
	    -- No obstacle in proximity, move forward--
	    
        --veer slightly left if there is no proxy action
	    sim.setJointTargetVelocity(motor_arr[1],maxWheelSpeed-0.15)
	    sim.setJointTargetVelocity(motor_arr[2],maxWheelSpeed)
	
	end

	if (res_L == 0 and res_M == 0 and res_R > 0) then
        flagL = true
	    -- Obstacle in proximity on right, move ?--
	    
	    sim.setJointTargetVelocity(motor_arr[1],turnWheelSpeed)
	    sim.setJointTargetVelocity(motor_arr[2],maxWheelSpeed)
	
	end

	if (res_L == 0 and res_M > 0 and res_R == 0) then
        
	    -- Obstacle in proximity in the middle, choose a random direction to turn
	    
        --flip coin
        local rand_coin = math.random(0, 1)
        print(rand_coin)
        if (rand_coin) then
            flagR = true;
            sim.setJointTargetVelocity(motor_arr[1],maxWheelSpeed) --right turn
            sim.setJointTargetVelocity(motor_arr[2],turnWheelSpeed)
	    else
            flagL=true;
            sim.setJointTargetVelocity(motor_arr[1],turnWheelSpeed) --left turn
            sim.setJointTargetVelocity(motor_arr[2],maxWheelSpeed)   
                
        end
    
	
	end

	if (res_L == 0 and res_M > 0 and res_R > 0) then
	
	    -- Obstacle in proximity on left and center, move ?--
	    flagL=true
	    sim.setJointTargetVelocity(motor_arr[1],turnWheelSpeed)--#)
	    sim.setJointTargetVelocity(motor_arr[2],maxWheelSpeed)--#)
	    
	end

	if (res_L > 0 and res_M == 0 and res_R == 0) then
	
	    -- Obstacle in proximity on leftt, move ?--
	    flagR = true
	    sim.setJointTargetVelocity(motor_arr[2],turnWheelSpeed)--#)
	    sim.setJointTargetVelocity(motor_arr[1],maxWheelSpeed)--#)
	    
	end

	if (res_L > 0 and res_M == 0 and res_R > 0) then
	
	    -- Obstacle in proximity on left and right, move ?--
	    flagL = true
	    sim.setJointTargetVelocity(motor_arr[1],turnWheelSpeed)--#)
	    sim.setJointTargetVelocity(motor_arr[2],maxWheelSpeed)--#)
	    
	end

	if (res_L > 0 and res_M > 0 and res_R == 0) then
	
	    -- Obstacle in proximity on left and centre, move ?--
	    flagR = true
	    sim.setJointTargetVelocity(motor_arr[1],maxWheelSpeed)--#)
	    sim.setJointTargetVelocity(motor_arr[2],turnWheelSpeed)--#)
	    
	end

	if (res_L > 0 and res_M > 0 and res_R > 0) then
	
	    -- Obstacle in proximity on left right and centre, move ?--
	    
        
        --flip coin
        local rand_coin = math.random(0, 1)
        if (rand_coin) then
            flagR=true
            sim.setJointTargetVelocity(motor_arr[1],maxWheelSpeed)--#)
            sim.setJointTargetVelocity(motor_arr[2],turnWheelSpeed)--#)
	    else
            flagL = true
            sim.setJointTargetVelocity(motor_arr[1],turnWheelSpeed)--#)
            sim.setJointTargetVelocity(motor_arr[2],maxWheelSpeed)--#)        
        end
    
    end
    
    for i=1,3,1 do --goes through each vision sensor (l
    result[i],data=sim.readVisionSensor(sensor_arr[i]) --save the sensor reading 
    
    sensorReading[i]=((data[11]<0.3) or (data[11]>0.95))
    
        if(sensorReading[3]) then --if right vision detects line, then
            flagL=true
            lineDetect = true
           
             -- data[11] is the average of intensity of the image
            
            sim.setJointTargetVelocity(motor_arr[1], -maxWheelSpeed) 
            sim.setJointTargetVelocity(motor_arr[2], slowWheelSpeed)
            orientation = sim.getObjectOrientation(model, -1)
           
       
       else if (sensorReading[1]) then --if left vision detects line, then go left
            lineDetect = true
            flagR=true
           
         
           sim.setJointTargetVelocity(motor_arr[2], -maxWheelSpeed) 
           sim.setJointTargetVelocity(motor_arr[1], slowWheelSpeed)
           orientation = sim.getObjectOrientation(model, -1)
           
        
       end

     
    end
    end
    if((lineDetect and ProxyDetect) or (flagL and flagR)) then
    orientation = sim.getObjectOrientation(model, -1)
    sim.setJointTargetVelocity(motor_arr[2], -slowWheelSpeed)
    sim.setJointTargetVelocity(motor_arr[1], -maxWheelSpeed)
    sim.wait(1,true)
    
    
    
    end
    end
    

end 